# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatLonCalcDialog
                                 A QGIS plugin
 Permite transformar Coordenadas en DMS a DD
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-08-21
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Denis Aguilar
        email                : daaguilarm@unah.hn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Latloncal_dialog_base.ui'))


class LatLonCalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatLonCalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

#Para latitud
        self.latD.valueChanged.connect(self.latDMStoDD)
        self.latM.valueChanged.connect(self.latDMStoDD)
        self.latS.valueChanged.connect(self.latDMStoDD)
        self.latH.currentTextChanged.connect(self.latDMStoDD)
        
        self.latDD.editingFinished.connect(self.latDDtoDMS)

#Para Longitud
        self.lonD.valueChanged.connect(self.lonDMStoDD)
        self.lonM.valueChanged.connect(self.lonDMStoDD)
        self.lonS.valueChanged.connect(self.lonDMStoDD)
        self.lonH.currentTextChanged.connect(self.lonDMStoDD)
        
        self.lonDD.editingFinished.connect(self.lonDDtoDMS)
        
    def latDMStoDD(self):
        iDeg = self.latD.value()
        iMin = self.latM.value()
        dSeg = self.latS.value()
        hem = self.latH.currentText()
        
        dDD = float(iDeg) + iMin/60 + dSeg/3600
        
        if hem == "S":
            dDD = dDD * -1
            
        self.latDD.setValue(dDD)
        
    def latDDtoDMS(self):
        dDD = self.latDD.value()
        
        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSeg = (dMin - iMin) * 60
        
        self.latD.setValue(abs(iDeg))
        self.latM.setValue(abs(iMin))
        self.latS.setValue(abs(dSeg))        
        
        if dDD < 0:
            self.latH.setCurrentText("S")
        else:
            self.latH.setCurrentText("N")
            
    #longitud calculos 
    
    def lonDMStoDD(self):
        iDeg = self.lonD.value()
        iMin = self.lonM.value()
        dSeg = self.lonS.value()
        hem = self.lonH.currentText()
        
        dDD = float(iDeg) + iMin/60 + dSeg/3600
        
        if hem == "W":
            dDD = dDD * -1
            
        self.lonDD.setValue(dDD)
        
    def lonDDtoDMS(self):
        dDD = self.lonDD.value()
        
        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSeg = (dMin - iMin) * 60
        
        self.lonD.setValue(abs(iDeg))
        self.lonM.setValue(abs(iMin))
        self.lonS.setValue(abs(dSeg))        
        
        if dDD < 0:
            self.lonH.setCurrentText("W")
        else:
            self.lonH.setCurrentText("E")
    
        

